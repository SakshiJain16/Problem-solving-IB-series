/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool mycomp(Interval a, Interval b)
 {
     return a.start<b.start;
 }
vector<Interval> Solution::merge(vector<Interval> &A) {
    vector<Interval> ans;
    sort(A.begin(),A.end(),mycomp);
    ans.push_back({A[0].start,A[0].end});
    int j=0;
    for(int i=1;i<A.size();i++)
    {
        if(ans[j].end<A[i].start)
        {
            j++;
            ans.push_back({A[i].start,A[i].end});
        }
        else
        {
            ans[j].start=min(ans[j].start,A[i].start);
            ans[j].end=max(ans[j].end,A[i].end);
        }
    }
    return ans;
    
}
