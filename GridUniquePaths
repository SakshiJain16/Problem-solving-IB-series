int Solution::uniquePaths(int A, int B) {
    /*
    //Recursion Tc-O(2^n)
    if(A==1 || B==1)
    return 1;
     
    return uniquePaths(A-1,B)+uniquePaths(A,B-1);
    
    //using dp tc-O(n^2)
    
    int dp[A][B];
    for(int i=0;i<A;i++)
    dp[i][0]=1;
    for(int j=0;j<B;j++)
    dp[0][j]=1;
    
    for(int i=1;i<A;i++)
    {
        for(int j=1;j<B;j++)
        {
            dp[i][j]=dp[i-1][j]+dp[i][j-1];
        }
    }
    return dp[A-1][B-1];*/
    
    //Using p&c
    if(A==1 || B==1)
    return 1;
    int max=1;
    int min=INT_MAX;
    if(A>=B){
    max=A;
    min=B;
    }
    else{
    max=B;
    min=A;
    }
    long int prod=1;
    int j=0;
    for(int i=max+min-2;i>max-1,j<min-1;j++,i--)
    prod=(prod*i)/(j+1);
    return (int)prod;
    
}
